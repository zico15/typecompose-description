{
  "docs": [
    {
      "component": "SpanElement",
      "props": { "innerText": "TypeComposer âˆ™ BorderPaneElement" }
    },
    {
      "component": "H1Element",
      "props": { "innerText": "Overview" }
    },
    {
      "component": "ParagraphElement",
      "props": {
        "innerText": "The BorderPaneElement is a layout component in TypeComposer that divides the screen into distinct regions: top, left, right, bottom, and center. It comes with two layout variants ('primary' and 'secondary'), which define the arrangement of these regions."
      }
    },
    {
      "component": "H1Element",
      "props": { "innerText": "1. Key Features" }
    },
    {
      "component": "ParagraphElement",
      "props": {
        "innerText": "- Provides a flexible, structured layout divided into five regions: top, left, right, bottom, and center."
      }
    },
    {
      "component": "ParagraphElement",
      "props": {
        "innerText": "- Supports two layout variants: 'primary' (default) and 'secondary'."
      }
    },
    {
      "component": "ParagraphElement",
      "props": {
        "innerText": "- Easily customizable through properties for styling and behavior."
      }
    },
    {
      "component": "H1Element",
      "props": { "innerText": "2. Variants" }
    },
    {
      "component": "H2Element",
      "props": { "innerText": "Primary (default)" }
    },
    {
      "component": "ParagraphElement",
      "props": {
        "innerText": "The 'primary' variant arranges the regions in a typical top-bottom-left-right-center order, where the top, left, and right regions surround the central content."
      }
    },
    {
      "component": "H2Element",
      "props": { "innerText": "Secondary" }
    },
    {
      "component": "ParagraphElement",
      "props": {
        "innerText": "The 'secondary' variant places the left and right regions next to the center, while the top and bottom regions remain above and below, respectively."
      }
    },
    {
      "component": "H1Element",
      "props": { "innerText": "3. Basic Example" }
    },
    {
      "component": "CodeComponent",
      "props": {
        "code": "import { BorderPaneElement } from \"typecomposer\";\n\nexport class AppPage extends BorderPaneElement {\n  constructor() {\n    super({\n      variant: \"primary\", // Use 'secondary' for an alternative layout\n      className: \"w-screen h-screen overflow-hidden\",\n    });\n    this.top = new NavBar();\n    this.left = new Sidebar();\n    this.center = new RouteView({ className: \"overflow-hidden w-full h-full\" });\n  }\n}"
      }
    },
    {
      "component": "H1Element",
      "props": { "innerText": "4. Properties" }
    },
    {
      "component": "TableElement",
      "props": {
        "headers": ["Property", "Type", "Description", "Example"],
        "rows": [
          ["variant", "\"primary\" | \"secondary\"", "Defines the layout variant. Defaults to 'primary'.", "\"secondary\""],
          ["className", "string (optional)", "CSS classes applied to the BorderPaneElement for styling.", "\"w-screen h-screen overflow-hidden\""],
          ["top", "Element (optional)", "The element to be displayed in the top region.", "new NavBar()"],
          ["left", "Element (optional)", "The element to be displayed in the left region.", "new Sidebar()"],
          ["right", "Element (optional)", "The element to be displayed in the right region.", "new WidgetPanel()"],
          ["bottom", "Element (optional)", "The element to be displayed in the bottom region.", "new Footer()"],
          ["center", "Element (optional)", "The element to be displayed in the center region.", "new RouteView()"]
        ],
        "className": "border border-gray-300"
      }
    },
    {
      "component": "H1Element",
      "props": { "innerText": "5. Examples" }
    },
    {
      "component": "H2Element",
      "props": { "innerText": "Primary Layout Example" }
    },
    {
      "component": "CodeComponent",
      "props": {
        "code": "new BorderPaneElement({\n  variant: \"primary\",\n  className: \"w-screen h-screen\",\n  top: new NavBar(),\n  left: new Sidebar(),\n  center: new RouteView({ className: \"w-full h-full\" }),\n  right: new WidgetPanel(),\n  bottom: new Footer(),\n});"
      }
    },
    {
      "component": "H2Element",
      "props": { "innerText": "Secondary Layout Example" }
    },
    {
      "component": "CodeComponent",
      "props": {
        "code": "new BorderPaneElement({\n  variant: \"secondary\",\n  className: \"w-screen h-screen\",\n  top: new NavBar(),\n  left: new Sidebar(),\n  center: new RouteView({ className: \"w-full h-full\" }),\n  right: new WidgetPanel(),\n  bottom: new Footer(),\n});"
      }
    },
    {
      "component": "H1Element",
      "props": { "innerText": "6. Default Behavior" }
    },
    {
      "component": "ParagraphElement",
      "props": {
        "innerText": "By default, the BorderPaneElement uses the 'primary' variant and arranges its regions accordingly."
      }
    },
    {
      "component": "ParagraphElement",
      "props": {
        "innerText": "If no regions (e.g., top, left, right, bottom, center) are provided, the corresponding area will simply remain empty."
      }
    },
    {
      "component": "H1Element",
      "props": { "innerText": "7. When to Use BorderPaneElement" }
    },
    {
      "component": "ParagraphElement",
      "props": {
        "innerText": "- When you need a structured layout with defined regions for top, left, right, bottom, and center areas."
      }
    },
    {
      "component": "ParagraphElement",
      "props": {
        "innerText": "- When your application requires consistent layouts with minimal customization effort."
      }
    },
    {
      "component": "ParagraphElement",
      "props": {
        "innerText": "- When you want a layout that can dynamically adapt to different content regions."
      }
    },
    {
      "component": "H1Element",
      "props": { "innerText": "Conclusion" }
    },
    {
      "component": "ParagraphElement",
      "props": {
        "innerText": "The BorderPaneElement is a powerful layout component for creating structured, multi-region layouts in TypeComposer. With its two layout variants ('primary' and 'secondary') and easy-to-customize properties, it provides a flexible solution for building complex UI layouts with minimal code."
      }
    }
  ]
}

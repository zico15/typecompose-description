{
  "docs": [
    {
      "component": "SpanElement",
      "props": { "innerText": "TypeComposer âˆ™ ButtonElement" }
    },
    {
      "component": "H1Element",
      "props": { "innerText": "Overview" }
    },
    {
      "component": "ParagraphElement",
      "props": {
        "innerText": "The ButtonElement is a core component in TypeComposer, extending the native HTMLButtonElement. It simplifies the creation of interactive buttons by combining native button functionalities with a property-driven configuration system for styling and behavior."
      }
    },
    {
      "component": "H1Element",
      "props": { "innerText": "1. Key Features" }
    },
    {
      "component": "ParagraphElement",
      "props": { "innerText": "- Inherits all native functionalities of HTMLButtonElement." }
    },
    {
      "component": "ParagraphElement",
      "props": { "innerText": "- Provides a property-driven API for styling, text, and event handling." }
    },
    {
      "component": "ParagraphElement",
      "props": { "innerText": "- Supports custom click behavior through the `onclick` property." }
    },
    {
      "component": "ParagraphElement",
      "props": { "innerText": "- Allows extensive styling, including colors, padding, borders, and hover effects." }
    },
    {
      "component": "H1Element",
      "props": { "innerText": "2. Basic Example" }
    },
    {
      "component": "CodeComponent",
      "props": {
        "code": "import { ButtonElement } from \"typecomposer\";\n\nclass ExampleButton extends ButtonElement {\n  constructor() {\n    super({\n      text: \"Click Me\",\n      padding: \"10px 20px\",\n      backgroundColor: \"#007bff\",\n      color: \"#fff\",\n      border: \"none\",\n      borderRadius: \"5px\",\n      onclick: () => alert(\"Button clicked!\"),\n    });\n  }\n}\n\nexport default ExampleButton;"
      }
    },
    {
      "component": "H1Element",
      "props": { "innerText": "3. Properties" }
    },
    {
      "component": "TableElement",
      "props": {
        "headers": ["Property", "Type", "Description", "Example"],
        "rows": [
          ["innerText", "string", "Defines the text displayed inside the button.", "\"Submit\""],
          ["type", "string", "Specifies the button type (e.g., 'button', 'submit', 'reset').", "\"submit\""],
          ["padding", "string", "Sets the internal spacing inside the button.", "\"10px 15px\""],
          ["backgroundColor", "string", "Defines the background color of the button.", "\"#007bff\""],
          ["color", "string", "Sets the text color.", "\"#fff\""],
          ["border", "string", "Defines the border style for the button.", "\"1px solid #ccc\""],
          ["borderRadius", "string | number", "Sets the radius for rounded corners.", "\"5px\""],
          ["hoverStyles", "object", "Specifies styles applied when the button is hovered.", "{ backgroundColor: \"#0056b3\" }"],
          ["onclick", "function", "Event handler for click events.", "() => alert(\"Button clicked!\")"]
        ],
        "className": "border border-gray-300"
      }
    },
    {
      "component": "H1Element",
      "props": { "innerText": "4. Examples" }
    },
    {
      "component": "H2Element",
      "props": { "innerText": "Primary Button" }
    },
    {
      "component": "CodeComponent",
      "props": {
        "code": "new ButtonElement({\n  text: \"Primary\",\n  padding: \"10px 20px\",\n  backgroundColor: \"#007bff\",\n  color: \"#fff\",\n  border: \"none\",\n  borderRadius: \"5px\",\n  onclick: () => console.log(\"Primary button clicked\"),\n});"
      }
    },
    {
      "component": "H2Element",
      "props": { "innerText": "Secondary Button" }
    },
    {
      "component": "CodeComponent",
      "props": {
        "code": "new ButtonElement({\n  text: \"Secondary\",\n  padding: \"8px 16px\",\n  backgroundColor: \"#6c757d\",\n  color: \"#fff\",\n  border: \"none\",\n  borderRadius: \"5px\",\n  onclick: () => console.log(\"Secondary button clicked\"),\n});"
      }
    },
    {
      "component": "H2Element",
      "props": { "innerText": "Button with Hover Effect" }
    },
    {
      "component": "CodeComponent",
      "props": {
        "code": "new ButtonElement({\n  text: \"Hover Me\",\n  padding: \"10px 20px\",\n  backgroundColor: \"#28a745\",\n  color: \"#fff\",\n  border: \"none\",\n  borderRadius: \"5px\",\n  hoverStyles: { backgroundColor: \"#218838\" },\n  onclick: () => console.log(\"Hover button clicked\"),\n});"
      }
    },
    {
      "component": "H1Element",
      "props": { "innerText": "5. Default Behavior" }
    },
    {
      "component": "ParagraphElement",
      "props": { "innerText": "By default, the ButtonElement:" }
    },
    {
      "component": "ParagraphElement",
      "props": { "innerText": "- Inherits the native behavior of HTMLButtonElement." }
    },
    {
      "component": "ParagraphElement",
      "props": { "innerText": "- Does not have any predefined styles, making it fully customizable." }
    },
    {
      "component": "ParagraphElement",
      "props": { "innerText": "- Can trigger click events using the `onclick` property." }
    },
    {
      "component": "H1Element",
      "props": { "innerText": "6. When to Use ButtonElement" }
    },
    {
      "component": "ParagraphElement",
      "props": { "innerText": "- When you need a fully customizable button for user interactions." }
    },
    {
      "component": "ParagraphElement",
      "props": { "innerText": "- For creating styled buttons with minimal configuration." }
    },
    {
      "component": "ParagraphElement",
      "props": { "innerText": "- When you want to add hover or click behaviors easily." }
    },
    {
      "component": "H1Element",
      "props": { "innerText": "Conclusion" }
    },
    {
      "component": "ParagraphElement",
      "props": {
        "innerText": "The ButtonElement is an essential component for creating interactive buttons in TypeComposer. Its property-driven design makes it easy to configure and style, while its compatibility with native HTMLButtonElement ensures robust functionality. Use it to add polished and responsive buttons to your application."
      }
    }
  ]
}
